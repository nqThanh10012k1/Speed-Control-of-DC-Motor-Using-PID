/*
 * PID
 *
 *  Created on: Oct 18, 2021
 *      Author: Thanh Nguyen
 */

#include <stm32f401re_rcc.h>
#include <stm32f401re_gpio.h>
#include <stm32f401re_usart.h>
#include <stm32f401re_tim.h>
#include <stm32f401re_exti.h>
#include <stm32f401re_syscfg.h>
#include <misc.h>
#include <stdint.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>
#include <stdio.h>
#include <stdbool.h>

#define USART1_GPIO_PORT					GPIOB
#define USART1_TX_GPIO_PIN					GPIO_Pin_6
#define USART1_RX_GPIO_PIN					GPIO_Pin_7

#define USART_BAUDRATE						9600

#define MANUAL          					0
#define AUTOMATIC       					1

void USART1_Init();
void getParameter(char * str);
void sendData();
void delay_ms(uint32_t ms);
void TIM1_TimeBaseInit();
void TIM2_IC_Init();
void TIM3_OC_Init();
void L298_Init();
void setTunings(double Kp, double Ki, double Kd);
void setSampleTime(uint32_t newSampleTime);
void setOutputLimits(double Min, double Max);
void setMode(int Mode);
void initialize();
void PID_Control();

/* biến truyền nhận dữ liệu uart */
char  buff[40];
uint8_t dataFlag = 0;

/* biến sử dụng điều khiển PID */
uint8_t mode = 0;
uint32_t dutyCycle;
double input, output, setPoint;
double iTerm, lastInput;
double kp, ki, kd;
double sampleTime = 4; //1 sec
double outMin, outMax;
bool inAuto = false;

/* biến đếm xung & thời gian */
uint32_t ccp_value = 0;
uint32_t timCount = 0;

int main()
{
	SystemCoreClockUpdate();

	setMode(AUTOMATIC);
	setOutputLimits(0, 8399);
	input = 0;

	USART1_Init();
	L298_Init();
	TIM1_TimeBaseInit();
	TIM2_IC_Init();
	TIM3_OC_Init();
	TIM_SetCompare2(TIM3, 0);
	TIM_SetCounter(TIM2, 0);
	TIM_SetCounter(TIM1, 0);

	while (1)
	{
		if (dataFlag == 1)
		{
			TIM_ITConfig(TIM1, TIM_IT_Update, DISABLE);
			getParameter(buff);
			setMode(mode);

			if (mode == MANUAL)
			{
				TIM_SetCompare2(TIM3, (uint32_t)(dutyCycle*8399)/100);
			}
			else
			{
				setTunings(kp, ki, kd);
			}

			TIM_SetCounter(TIM1, 0);
			TIM_ITConfig(TIM1, TIM_IT_Update, ENABLE);
			dataFlag = 0;
		}

		if (timCount == 250)
		{
			sendData();
			timCount = 0;
		}
	}
}

/* Module Serial ********************************************************************************************************/
void USART1_Init()
{
	GPIO_InitTypeDef GPIO_InitStructure;
	USART_InitTypeDef USART_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Pin = USART1_TX_GPIO_PIN | USART1_RX_GPIO_PIN;
	GPIO_PinAFConfig(USART1_GPIO_PORT, GPIO_PinSource6, GPIO_AF_USART1);
	GPIO_PinAFConfig(USART1_GPIO_PORT, GPIO_PinSource7, GPIO_AF_USART1);
	GPIO_Init(USART1_GPIO_PORT, &GPIO_InitStructure);

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
	USART_InitStructure.USART_BaudRate = USART_BAUDRATE;
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
	USART_InitStructure.USART_Parity = USART_Parity_No;
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	USART_InitStructure.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
	USART_Init(USART1, &USART_InitStructure);
	USART_Cmd(USART1, ENABLE);

	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);

	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_Init(&NVIC_InitStructure);
}

void USART1_IRQHandler()
{
	static uint8_t i = 0, status = 0;
	uint8_t temp;

	if (USART_GetFlagStatus(USART1, USART_FLAG_RXNE) == 1)
	{
		if (status == 0)
		{
			if ((temp = USART_ReceiveData(USART1)) == 'S')
			{
				status = 1;
			}
		}
		else if (status == 1)
		{
			if ((temp = USART_ReceiveData(USART1)) != 'E')
			{
				buff[i++] = temp;
			}
			else
			{
				i = 0;
				status = 0;
				dataFlag = 1;
			}
		}
	}

	USART_ClearITPendingBit(USART1, USART_IT_RXNE);
}

void getParameter(char * str)
{
    char * tok;

    tok = str;

    for (uint8_t i = 0; i < 6; i++)
    {
        if (i == 0)
        {
            tok = strtok(tok, "/");
            mode = atoi(tok);
        }
        else if (i == 1)
        {
            tok = strtok(NULL, "/");
            setPoint = atof(tok);
        }
        else if (i == 2)
        {
            tok = strtok(NULL, "/");
            kp = atof(tok);
        }
        else if (i == 3)
        {
        	tok = strtok(NULL, "/");
        	ki = atof(tok);
        }
        else if (i == 4)
        {
        	tok = strtok(NULL, "/");
        	kd = atof(tok);
        }
        else
        {
        	tok = strtok(NULL, "E");
        	dutyCycle = atof(tok);
        }
    }
}

void sendData()		// raspberry
{
	char temp[20];

	sprintf(temp, "S%ldE", (uint32_t)input);
	for (int i = 0; *(temp+i) != '\0'; i++)
	{
		USART_SendData(USART1, *(temp+i));
		delay_ms(2);
	}
}

/*
void sendData()		// arduino
{
	char temp[20];

	sprintf(temp, "%ld\r\n", (uint32_t)input);
	for (int i = 0; *(temp+i) != '\0'; i++)
	{
		USART_SendData(USART1, *(temp+i));
		delay_ms(2);
	}
}*/

void delay_ms(uint32_t ms)
{
	for (uint32_t i = 0; i < ms; i++)
	{
		for (uint32_t i = 0; i < 5000; i++);
	}
}

/* Module Timer ******************************************************************************************************************************************/
void TIM1_TimeBaseInit() 	// 4 ms
{
	TIM_TimeBaseInitTypeDef		TIMER_Init_Structure;
	NVIC_InitTypeDef			NVIC_Init_Structure;

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
	TIMER_Init_Structure.TIM_Prescaler = 335;
	TIMER_Init_Structure.TIM_CounterMode = TIM_CounterMode_Up;
	TIMER_Init_Structure.TIM_Period = 999;
	TIMER_Init_Structure.TIM_ClockDivision = TIM_CKD_DIV1;
	TIMER_Init_Structure.TIM_RepetitionCounter = 0;
	TIM_TimeBaseInit(TIM1, &TIMER_Init_Structure);
	TIM_Cmd(TIM1, ENABLE);

	NVIC_Init_Structure.NVIC_IRQChannel = TIM1_UP_TIM10_IRQn;
	NVIC_Init_Structure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init_Structure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_Init_Structure.NVIC_IRQChannelSubPriority = 0;
	NVIC_Init(&NVIC_Init_Structure);
	TIM_ITConfig(TIM1, TIM_IT_Update, ENABLE);
}

void TIM1_UP_TIM10_IRQHandler()
{
	PID_Control();
	timCount++;

	TIM_ClearITPendingBit(TIM1, TIM_IT_Update);
}

void TIM2_IC_Init()
{
	GPIO_InitTypeDef	GPIO_Init_Structure;
	TIM_TimeBaseInitTypeDef TIMER_Base_Init_Structure;
	TIM_ICInitTypeDef	TIMER_IC_Init_Structure;
	NVIC_InitTypeDef	NVIC_Init_Structure;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
	GPIO_Init_Structure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_Init_Structure.GPIO_OType = GPIO_OType_PP;
	GPIO_Init_Structure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Init_Structure.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_Init_Structure.GPIO_Pin = GPIO_Pin_1;
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource1, GPIO_AF_TIM2);
	GPIO_Init(GPIOA, &GPIO_Init_Structure);

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
	TIMER_Base_Init_Structure.TIM_Prescaler = 83;
	TIMER_Base_Init_Structure.TIM_Period = 0xFFFF;
	TIMER_Base_Init_Structure.TIM_CounterMode = TIM_CounterMode_Up;
	TIMER_Base_Init_Structure.TIM_ClockDivision = 0;
	TIM_TimeBaseInit(TIM2, &TIMER_Base_Init_Structure);

	TIMER_IC_Init_Structure.TIM_Channel = TIM_Channel_2;
	TIMER_IC_Init_Structure.TIM_ICPolarity = TIM_ICPolarity_Rising;
	TIMER_IC_Init_Structure.TIM_ICSelection = TIM_ICSelection_DirectTI;
	TIMER_IC_Init_Structure.TIM_ICFilter = 0x0;
	TIMER_IC_Init_Structure.TIM_ICPrescaler = TIM_ICPSC_DIV1;
	TIM_ICInit(TIM2, &TIMER_IC_Init_Structure);

	TIM_ITConfig(TIM2, TIM_IT_CC2, ENABLE);
	NVIC_Init_Structure.NVIC_IRQChannel = TIM2_IRQn;
	NVIC_Init_Structure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_Init_Structure.NVIC_IRQChannelSubPriority = 0;
	NVIC_Init_Structure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_Init_Structure);

	TIM_Cmd(TIM2, ENABLE);
}

void TIM2_IRQHandler()
{
	if (TIM_GetFlagStatus(TIM2, TIM_FLAG_CC2) == SET)
	{
		ccp_value = TIM_GetCapture2(TIM2);
		TIM_SetCounter(TIM2, 0);
		input = (double)60000000/(11*ccp_value);
		TIM_ClearITPendingBit(TIM2, TIM_IT_CC2);
	}
}

void TIM3_OC_Init()
{
	GPIO_InitTypeDef			GPIO_InitStructure;
	TIM_TimeBaseInitTypeDef		TIM_TimeBase_InitStructure;
	TIM_OCInitTypeDef			TIM_OC_InitStructure;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource5, GPIO_AF_TIM3);
	GPIO_Init(GPIOB, &GPIO_InitStructure);

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
	TIM_TimeBase_InitStructure.TIM_Prescaler = 0;
	TIM_TimeBase_InitStructure.TIM_Period = 8399;
	TIM_TimeBase_InitStructure.TIM_ClockDivision = 0;
	TIM_TimeBase_InitStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBase_InitStructure.TIM_RepetitionCounter = 0;
	TIM_TimeBaseInit(TIM3, &TIM_TimeBase_InitStructure);

	TIM_OC_InitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OC_InitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
	TIM_OC_InitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OC_InitStructure.TIM_Pulse = 0;
	TIM_OC2Init(TIM3, &TIM_OC_InitStructure);
	TIM_CtrlPWMOutputs(TIM3, ENABLE);
	TIM_Cmd(TIM3, ENABLE);
}

void L298_Init()
{
	GPIO_InitTypeDef GPIO_Init_Structure;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
	GPIO_Init_Structure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_Init_Structure.GPIO_OType = GPIO_OType_PP;
	GPIO_Init_Structure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Init_Structure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init_Structure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9;
	GPIO_Init(GPIOB, &GPIO_Init_Structure);
	GPIO_SetBits(GPIOB, GPIO_Pin_8);
	GPIO_ResetBits(GPIOB, GPIO_Pin_9);
}

void PID_Control()
{
    if (!inAuto) return;

    /*Compute all the working error variables*/
    double error = setPoint - input;
    iTerm += (ki*error);

    if (iTerm > outMax)
    {
        iTerm = outMax;
    }
    else if (iTerm < outMin)
    {
        iTerm = outMin;
    }

    double dInput = (input - lastInput);

    /*Compute PID Output*/
    output = kp*error + iTerm - kd*dInput;

    if (output > outMax)
    {
        output = outMax;
    }
    else if (output < outMin)
    {
        output = outMin;
    }

    TIM_SetCompare2(TIM3, output);

    /*Remember some variables for next time*/
    lastInput = input;
}

void setTunings(double Kp, double Ki, double Kd)
{
    double sampleTimeInSec = ((double)sampleTime)/1000;
    kp = Kp;
    ki = Ki*sampleTimeInSec;
    kd = Kd/sampleTimeInSec;
}

void setSampleTime(uint32_t newSampleTime)
{
    if (newSampleTime > 0)
    {
        double ratio  = (double)newSampleTime/(double)sampleTime;
        ki *= ratio;
        kd /= ratio;
        sampleTime = (uint32_t)newSampleTime;
    }
}

void setOutputLimits(double Min, double Max)
{
    if (Min > Max) return;
    outMin = Min;
    outMax = Max;

    if (output > outMax)
    {
        output = outMax;
    }
    else if (output < outMin)
    {
        output = outMin;
    }

    if (iTerm > outMax)
    {
        iTerm = outMax;
    }
    else if (iTerm < outMin)
    {
        iTerm = outMin;
    }
}

void setMode(int Mode)
{
    /*bool newAuto = (Mode == AUTOMATIC);
    if(newAuto && !inAuto)
    {  we just went from manual to auto
        initialize();
    }
    inAuto = newAuto;*/

    if ((Mode == AUTOMATIC) && (inAuto == false))
    {
    	initialize();
    }
    inAuto = Mode;
}

void initialize()
{
    lastInput = input;
    iTerm = output;

    if (iTerm > outMax)
    {
        iTerm = outMax;
    }
    else if (iTerm < outMin)
    {
        iTerm = outMin;
    }
}
